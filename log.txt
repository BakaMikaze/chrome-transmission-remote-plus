 
 ### processing  source\js\basket.js 

[WARNING] Try to use a single 'var' statement per scope.
("Select no more than 5 files!");}else{for( ---> var  <--- i=0,file;file=files[
 
 ### processing  source\js\bencode.js 

[WARNING] Try to use a single 'var' statement per scope.
:{};incrementCounter(1); ---> var  <--- type=getType();while(counter<

[WARNING] Try to use a single 'var' statement per scope.
){if(obj instanceof Array){ ---> var  <--- result=isDataStructure(type)?decode()

[WARNING] Try to use a single 'var' statement per scope.
else{if(obj instanceof Object){ ---> var  <--- key=getValue(type);type=getType

[WARNING] Try to use a single 'var' statement per scope.
type);type=getType(); ---> var  <--- value=isDataStructure(type)?decode()

[WARNING] Try to use a single 'var' statement per scope.
returnobject.getDecodedObject();}; ---> var  <--- root=this;if(root.Bencode==
 
 ### processing  source\js\class.js 
 
 ### processing  source\js\events.js 
 
 ### processing  source\js\inject.js 

[WARNING] Try to use a single 'var' statement per scope.
var links=document.links;for( ---> var  <--- i=0,link;link=links[
 
 ### processing  source\js\jquery-1.7.js 

[WARNING] Try to use a single 'var' statement per scope.
.navigator,location=window.location; ---> var  <--- jQuery=(function(){var jQuery=

[WARNING] Try to use a single 'var' statement per scope.
];if(array!=null){ ---> var  <--- type=jQuery.type(array);if

[WARNING] Try to use a single 'var' statement per scope.
second.length==="number"){for( ---> var  <--- l=second.length;j<l;

[WARNING] Try to use a single 'var' statement per scope.
;inv=!!inv;for( ---> var  <--- i=0,length=elems.length;

[WARNING] Try to use a single 'var' statement per scope.
(fn)){returnundefined;} ---> var  <--- args=slice.call(arguments,2)

[WARNING] Try to use a single 'var' statement per scope.
(typeofkey==="object"){for( ---> var  <--- k in key){jQuery.access(elems

[WARNING] Try to use a single 'var' statement per scope.
jQuery.isFunction(value);for( ---> var  <--- i=0;i<length;i++

[WARNING] Try to use a single 'var' statement per scope.
}returnjQuery;})(); ---> var  <--- flagsCache={};functioncreateFlags(flags)

[WARNING] Try to use a single 'var' statement per scope.
<argLength;argIndex++){for( ---> var  <--- i=0;i<list.length;

[WARNING] Try to use a single 'var' statement per scope.
;}};returnself;}; ---> var  <--- sliceDeferred=[].slice;jQuery.extend

[WARNING] Try to use a single 'var' statement per scope.
.boxModel=jQuery.support.boxModel; ---> var  <--- rbrace=/^(?:\{.*\}|\[.*\])$/,rmultiDash=/([A-Z])/g;jQuery.

[WARNING] Try to use a single 'var' statement per scope.
this[0].attributes;for( ---> var  <--- i=0,l=attr.length;

[WARNING] Try to use a single 'var' statement per scope.
.promise();}}); ---> var  <--- rclass=/[\n\t\r]/g,rspace=/\s+/,rreturn=

[WARNING] Try to use a single 'var' statement per scope.
;}}});}); ---> var  <--- rnamespaces=/\.(.*)$/,rformElems=/^(?:textarea|input|select)$/i,rperiod=

[WARNING] Try to use a single 'var' statement per scope.
(typeoftypes==="object"){for( ---> var  <--- type in types){this.off(type

[WARNING] Try to use a single 'var' statement per scope.
=false;return0;}); ---> var  <--- Sizzle=function(selector,context,results,

[WARNING] Try to use a single 'var' statement per scope.
selector!=="string"){returnresults;} ---> var  <--- m,set,checkSet,extra,ret,

[WARNING] Try to use a single 'var' statement per scope.
){throw"Syntax error, unrecognized expression: "+msg;}; ---> var  <--- getText=Sizzle.getText=function(elem)

[WARNING] Try to use a single 'var' statement per scope.
;}}}returnret;}; ---> var  <--- Expr=Sizzle.selectors={order:[

[WARNING] Try to use a single 'var' statement per scope.
part.toLowerCase();}for( ---> var  <--- i=0,l=checkSet.length,

[WARNING] Try to use a single 'var' statement per scope.
[i];if(elem){ ---> var  <--- parent=elem.parentNode;checkSet[i]

[WARNING] Try to use a single 'var' statement per scope.
(match[1]);for( ---> var  <--- i=0,l=results.length;

[WARNING] Try to use a single 'var' statement per scope.
else{if(name==="not"){ ---> var  <--- not=match[3];for(var 

[WARNING] Try to use a single 'var' statement per scope.
not=match[3];for( ---> var  <--- j=0,l=not.length;

[WARNING] Try to use a single 'var' statement per scope.
,array);}}}}; ---> var  <--- origPOS=Expr.match.POS,fescape=

[WARNING] Try to use a single 'var' statement per scope.
0+1);};for( ---> var  <--- type in Expr.match){Expr.match

[WARNING] Try to use a single 'var' statement per scope.
replace(/\\(\d+)/g,fescape));} ---> var  <--- makeArray=function(array,results){array

[WARNING] Try to use a single 'var' statement per scope.
array.length==="number"){for( ---> var  <--- l=array.length;i<l;

[WARNING] Try to use a single 'var' statement per scope.
}}}returnret;};} ---> var  <--- sortOrder,siblingCheck;if(document.documentElement.

[WARNING] Try to use a single 'var' statement per scope.
;bl=bp.length;for( ---> var  <--- i=0;i<al&&i<

[WARNING] Try to use a single 'var' statement per scope.
(match[1]==="*"){ ---> var  <--- tmp=[];for(var i=

[WARNING] Try to use a single 'var' statement per scope.
{var tmp=[];for( ---> var  <--- i=0;results[i];i

[WARNING] Try to use a single 'var' statement per scope.
(match&&match[3]){ ---> var  <--- elem=context.getElementById(match[3]

[WARNING] Try to use a single 'var' statement per scope.
nodeName.toLowerCase()!=="object"){ ---> var  <--- oldContext=context,old=context.getAttribute(

[WARNING] Try to use a single 'var' statement per scope.
extra,seed);};for( ---> var  <--- prop in oldSizzle){Sizzle[prop]=

[WARNING] Try to use a single 'var' statement per scope.
html.msMatchesSelector;if(matches){ ---> var  <--- disconnectedMatch=!matches.call(document.createElement

[WARNING] Try to use a single 'var' statement per scope.
;i<l;i++){ ---> var  <--- elem=checkSet[i];if(elem

[WARNING] Try to use a single 'var' statement per scope.
[i];if(elem){ ---> var  <--- match=false;elem=elem[dir]

[WARNING] Try to use a single 'var' statement per scope.
;i<l;i++){ ---> var  <--- elem=checkSet[i];if(elem

[WARNING] Try to use a single 'var' statement per scope.
[i];if(elem){ ---> var  <--- match=false;elem=elem[dir]

[WARNING] Try to use a single 'var' statement per scope.
.nodeName!=="HTML":false;}; ---> var  <--- posProcess=function(selector,context,seed)

[WARNING] Try to use a single 'var' statement per scope.
?selector+"*":selector;for( ---> var  <--- i=0,l=root.length;

[WARNING] Try to use a single 'var' statement per scope.
Sizzle.contains;})(); ---> var  <--- runtil=/Until$/,rparentsprev=/^(?:parents|prevUntil|prevAll)/,rmultiselector=

[WARNING] Try to use a single 'var' statement per scope.
returntrue;}}});} ---> var  <--- ret=this.pushStack("","find",

[WARNING] Try to use a single 'var' statement per scope.
(jQuery.isArray(selectors)){ ---> var  <--- level=1;while(cur&&cur.

[WARNING] Try to use a single 'var' statement per scope.
;level++;}returnret;} ---> var  <--- pos=POS.test(selectors)||typeof

[WARNING] Try to use a single 'var' statement per scope.
));}}returnsafeFrag;} ---> var  <--- nodeNames="abbr article aside audio canvas datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",rinlinejQuery=/ jQuery\d+="(?:\d+|null)"/g,rleadingWhitespace=

[WARNING] Try to use a single 'var' statement per scope.
nodeName(first,"tr");for( ---> var  <--- i=0,l=this.length,

[WARNING] Try to use a single 'var' statement per scope.
;returnthis;}else{for( ---> var  <--- i=0,l=insert.length;

[WARNING] Try to use a single 'var' statement per scope.
;i<l;i++){ ---> var  <--- elems=(i>0?this.clone

[WARNING] Try to use a single 'var' statement per scope.
[0].ownerDocument||document;} ---> var  <--- ret=[],j;for(var 

[WARNING] Try to use a single 'var' statement per scope.
ret=[],j;for( ---> var  <--- i=0,elem;(elem=elems

[WARNING] Try to use a single 'var' statement per scope.
elem.replace(rxhtmlTag,"<$1></$2>"); ---> var  <--- tag=(rtagName.exec(elem)||

[WARNING] Try to use a single 'var' statement per scope.
(!jQuery.support.tbody){ ---> var  <--- hasBody=rtbody.test(elem),tbody

[WARNING] Try to use a single 'var' statement per scope.
}elem=div.childNodes;}} ---> var  <--- len;if(!jQuery.support.appendChecked

[WARNING] Try to use a single 'var' statement per scope.
[i].nodeType===1){ ---> var  <--- jsTags=jQuery.grep(ret[i]

[WARNING] Try to use a single 'var' statement per scope.
=jQuery.support.deleteExpando;for( ---> var  <--- i=0,elem;(elem=elems

[WARNING] Try to use a single 'var' statement per scope.
data&&data.events){for( ---> var  <--- type in data.events){if(special

[WARNING] Try to use a single 'var' statement per scope.
parentNode.removeChild(elem);}} ---> var  <--- ralpha=/alpha\([^)]*\)/i,ropacity=/opacity=([^)]*)/,rupper=

[WARNING] Try to use a single 'var' statement per scope.
{var old={};for( ---> var  <--- name in options){old[name]=

[WARNING] Try to use a single 'var' statement per scope.
.hidden(elem);};} ---> var  <--- r20=/%20/g,rbracket=/\[\]$/,rCRLF=

[WARNING] Try to use a single 'var' statement per scope.
);if(off>=0){ ---> var  <--- selector=url.slice(off,url.

[WARNING] Try to use a single 'var' statement per scope.
.slice(0,off);} ---> var  <--- type="GET";if(params){if

[WARNING] Try to use a single 'var' statement per scope.
);type="POST";}}} ---> var  <--- self=this;jQuery.ajax({url

[WARNING] Try to use a single 'var' statement per scope.
if(s.cache===false){ ---> var  <--- ts=jQuery.now(),ret=

[WARNING] Try to use a single 'var' statement per scope.
;});}else{for( ---> var  <--- prefix in a){buildParams(prefix,a

[WARNING] Try to use a single 'var' statement per scope.
;}}}}returnresponse;} ---> var  <--- jsc=jQuery.now(),jsre=

[WARNING] Try to use a single 'var' statement per scope.
test(s.data))){ ---> var  <--- responseContainer,jsonpCallback=s.jsonpCallback=jQuery.

[WARNING] Try to use a single 'var' statement per scope.
;}}};}}); ---> var  <--- xhrOnUnloadAbort=window.ActiveXObject?function(){

[WARNING] Try to use a single 'var' statement per scope.
}}};}});} ---> var  <--- elemdisplay={},iframe,iframeDoc,rfxtypes

[WARNING] Try to use a single 'var' statement per scope.
,callback);}else{for( ---> var  <--- i=0,j=this.length;

[WARNING] Try to use a single 'var' statement per scope.
;}returnelemdisplay[nodeName];} ---> var  <--- rtable=/^t(?:able|d|h)$/i,rroot=/^(?:body|html)$/i;if(

[WARNING] Try to use a single 'var' statement per scope.
);}catch(e){} ---> var  <--- doc=elem.ownerDocument,docElem=doc.

[WARNING] Try to use a single 'var' statement per scope.
:0,left:0};} ---> var  <--- body=doc.body,win=getWindow(

[WARNING] Try to use a single 'var' statement per scope.
.offset.bodyOffset(elem);} ---> var  <--- computedStyle,offsetParent=elem.offsetParent,prevOffsetParent=

[WARNING] Try to use a single 'var' statement per scope.
elem.style.position="relative";} ---> var  <--- curElem=jQuery(elem),curOffset=curElem

[WARNING] Try to use a single 'var' statement per scope.
(jQuery.isWindow(elem)){ ---> var  <--- docElemProp=elem.document.documentElement["client"+

[WARNING] Try to use a single 'var' statement per scope.
else{if(size===undefined){ ---> var  <--- orig=jQuery.css(elem,type)

[WARNING] The symbol name is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(obj){for(var  ---> name <---  in obj){returnfalse;}returntrue

[WARNING] The symbol init is declared but is apparently never used.
This code can probably be written in a more compact way.
sub;jQuerySub.fn.init=function ---> init <--- (selector,context){if(context&&

[WARNING] The symbol actual is declared but is apparently never used.
This code can probably be written in a more compact way.
var i,length,elem,type, ---> actual <--- ;for(i=0,length=args

[WARNING] The symbol pCount is declared but is apparently never used.
This code can probably be written in a more compact way.
Array(length),count=length, ---> pCount <--- =length,deferred=length<=1&&firstParam

[WARNING] The symbol events is declared but is apparently never used.
This code can probably be written in a more compact way.
,testElementParent,testElement,testElementStyle,tds, ---> events <--- ,eventName,i,isSupported;div.setAttribute

[WARNING] The symbol table is declared but is apparently never used.
This code can probably be written in a more compact way.
){var container,outer,inner, ---> table <--- ,td,offsetSupport,conMarginTop=1,ptlm

[WARNING] The symbol internalKey is declared but is apparently never used.
This code can probably be written in a more compact way.
;}var privateCache,thisCache,ret, ---> internalKey <--- =jQuery.expando,getByName=typeofname===

[WARNING] The symbol internalKey is declared but is apparently never used.
This code can probably be written in a more compact way.
;}var thisCache,i,l, ---> internalKey <--- =jQuery.expando,isNode=elem.nodeType

[WARNING] The symbol rnamespaces is declared but is apparently never used.
This code can probably be written in a more compact way.
}}});});var  ---> rnamespaces <--- =/\.(.*)$/,rformElems=/^(?:textarea|input|select)$/i,rperiod=/\./g

[WARNING] The symbol rperiod is declared but is apparently never used.
This code can probably be written in a more compact way.
var rnamespaces=/\.(.*)$/,rformElems=/^(?:textarea|input|select)$/i, ---> rperiod <--- =/\./g,rspaces=/ /g,rescape=/[^\w\s.|`]/g

[WARNING] The symbol rspaces is declared but is apparently never used.
This code can probably be written in a more compact way.
,rformElems=/^(?:textarea|input|select)$/i,rperiod=/\./g, ---> rspaces <--- =/ /g,rescape=/[^\w\s.|`]/g,rtypenamespace=/^([^\.]*)?(?:\.(.+))?$/

[WARNING] The symbol rescape is declared but is apparently never used.
This code can probably be written in a more compact way.
,rperiod=/\./g,rspaces=/ /g, ---> rescape <--- =/[^\w\s.|`]/g,rtypenamespace=/^([^\.]*)?(?:\.(.+))?$/,rhoverHack=/\bhover(\.\S+)?/

[WARNING] The symbol quick is declared but is apparently never used.
This code can probably be written in a more compact way.
,type,namespaces,handleObj,handleObjIn, ---> quick <--- ,handlers,special;if(elem.nodeType

[WARNING] The symbol related is declared but is apparently never used.
This code can probably be written in a more compact way.
,matches,handleObj,sel,hit, ---> related <--- ;args[0]=event;event.

[WARNING] The symbol selector is declared but is apparently never used.
This code can probably be written in a more compact way.
.relatedTarget,handleObj=event.handleObj, ---> selector <--- =handleObj.selector,oldType,ret;if

[WARNING] The symbol cache is declared but is apparently never used.
This code can probably be written in a more compact way.
var first,last,doneName,parent, ---> cache <--- ,count,diff,type=match[1
 
 ### processing  source\js\options.js 

[WARNING] Try to use a single 'var' statement per scope.
document.getElementById("customdirs");for( ---> var  <--- i=2,row;row=table.

[WARNING] Try to use a single 'var' statement per scope.
value===label){return;}} ---> var  <--- rowElem=table.insertRow(-1),

[WARNING] Try to use a single 'var' statement per scope.
),dirs=[];for( ---> var  <--- i=2,row;row=table.

[WARNING] Try to use a single 'var' statement per scope.
).disabled=true;}for( ---> var  <--- i=0,dir;dir=dirs[
 
 ### processing  source\js\popup.js 

[WARNING] Try to use a single 'var' statement per scope.
}],tmp,time;for( ---> var  <--- i=0,unit;unit=units[

[WARNING] Try to use a single 'var' statement per scope.
("#status")[0];for( ---> var  <--- i=0,torrent;torrent=torrents[

[WARNING] Try to use a single 'var' statement per scope.
]++;break;}}for( ---> var  <--- i=0,uTorrent;uTorrent=uTorrents[

[WARNING] The variable i has already been declared in the same scope...
++;break;}}for(var  ---> i <--- =0,uTorrent;uTorrent=uTorrents[i

[WARNING] Try to use a single 'var' statement per scope.
a.addedDate;});for( ---> var  <--- i=0,uTorrent;uTorrent=uTorrents[

[WARNING] Try to use a single 'var' statement per scope.
(uTorrents);break;caseTAG_UPDATE: ---> var  <--- rTorrents=msg.args.removed,uTorrents=

[WARNING] The variable uTorrents has already been declared in the same scope...
var rTorrents=msg.args.removed, ---> uTorrents <--- =msg.args.torrents,torrent;for

[WARNING] Try to use a single 'var' statement per scope.
.args.torrents,torrent;for( ---> var  <--- i=0,rTorrent;rTorrent=rTorrents[

[WARNING] The variable i has already been declared in the same scope...
args.torrents,torrent;for(var  ---> i <--- =0,rTorrent;rTorrent=rTorrents[i

[WARNING] Try to use a single 'var' statement per scope.
rTorrents[i];++i){ ---> var  <--- torrent=torrents.getTorrentById(rTorrent);if

[WARNING] The variable torrent has already been declared in the same scope...
[i];++i){var  ---> torrent <--- =torrents.getTorrentById(rTorrent);if(

[WARNING] Try to use a single 'var' statement per scope.
.removeElem();}}for( ---> var  <--- i=0,uTorrent;uTorrent=uTorrents[

[WARNING] The variable i has already been declared in the same scope...
removeElem();}}for(var  ---> i <--- =0,uTorrent;uTorrent=uTorrents[i

[WARNING] The variable uTorrent has already been declared in the same scope...
}}for(var i=0, ---> uTorrent <--- ;uTorrent=uTorrents[i];++i

[WARNING] Try to use a single 'var' statement per scope.
uTorrents[i];++i){ ---> var  <--- torrent=torrents.getTorrentById(uTorrent.id)

[WARNING] The variable torrent has already been declared in the same scope...
[i];++i){var  ---> torrent <--- =torrents.getTorrentById(uTorrent.id);

[WARNING] The symbol list is declared but is apparently never used.
This code can probably be written in a more compact way.
,totalDownload=0,totalUpload=0, ---> list <--- =$("#list")[0],status

[WARNING] The symbol status is declared but is apparently never used.
This code can probably be written in a more compact way.
=$("#list")[0], ---> status <--- =$("#status")[0];for
 
 ### processing  source\js\torrentLinks.js 
 
 ### processing  source\js\torrentParsing.js 

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
}functiongetFile(url,callback){ ---> $ <--- .get(url,function(data){
 
### processing %G 
 
### processing %G 
 
### processing %G 
 
### processing %G 
 
### processing %G 
### compressing dist 
### compressing debug 
